/gpfs/home6/twouters2/jim/src/jimgw/prior.py:94: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Uniform(Prior):
/gpfs/home6/twouters2/jim/src/jimgw/prior.py:149: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class Unconstrained_Uniform(Prior):
/gpfs/home6/twouters2/jim/src/jimgw/prior.py:278: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class AlignedSpin(Prior):
/gpfs/home6/twouters2/jim/src/jimgw/prior.py:392: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  class PowerLaw(Prior):
/gpfs/home6/twouters2/jim/src/jimgw/single_event/detector.py:410: UserWarning: As of jaxtyping version 0.2.24, jaxtyping now prefers the syntax
```
from jaxtyping import jaxtyped
# Use your favourite typechecker: usually one of the two lines below.
from typeguard import typechecked as typechecker
from beartype import beartype as typechecker

@jaxtyped(typechecker=typechecker)
def foo(...):
```
and the old double-decorator syntax
```
@jaxtyped
@typechecker
def foo(...):
```
should no longer be used. (It will continue to work as it did before, but the new approach will produce more readable error messages.)
In particular note that `typechecker` must be passed via keyword argument; the following is not valid:
```
@jaxtyped(typechecker)
def foo(...):
```

  def load_psd(
Hello world!
Hello world!
------------------------------------------------
Arguments script:
outdir: /scratch-local/twouters2.5313306/out_slurm/
load_existing_config: False
N: 
SNR_threshold: 12
waveform_approximant: TaylorF2
relative_binning_binsize: 500
relative_binning_ref_params_equal_true_params: True
save_training_chains: False
eps_mass_matrix: 1e-06
smart_initial_guess: False
use_scheduler: True
stopping_criterion_global_acc: 0.2
n_loop_training: 2
n_loop_production: 2
n_local_steps: 5
n_global_steps: 400
n_epochs: 50
n_chains: 1000
learning_rate: 0.001
max_samples: 50000
momentum: 0.9
batch_size: 50000
use_global: True
logging: True
keep_quantile: 0.0
local_autotune: None
train_thinning: 10
output_thinning: 30
n_sample_max: 10000
precompile: False
verbose: False
num_layers: 10
hidden_size: [128, 128]
num_bins: 8
------------------------------------------------
Starting main code
Using polynomial learning rate scheduler
Saving output to /scratch-local/twouters2.5313306/out_slurm/
The SNR threshold parameter is set to 12
Generating new config
Made injection directory:  /scratch-local/twouters2.5313306/out_slurm/injection_1/
Injection directory exists:  /scratch-local/twouters2.5313306/out_slurm/injection_1/
Injecting signals . . .
The injected parameters are {'M_c': 1.0851553334911104, 'eta': 0.24937999526266716, 's1_z': 0.0010677645919929604, 's2_z': -0.029701408320052226, 'lambda_1': 1322.1110693885091, 'lambda_2': 4970.616732992958, 'd_L': 228.83772338576665, 't_c': -0.03497454423676159, 'phase_c': 4.174334428802041, 'iota': 1.7222792177220139, 'psi': 0.076595884714059, 'ra': 0.8130964304128191, 'dec': 0.13131479846520577}
Signal injected
Network SNR is less than 12, generating new parameters
Generating new config
Injection directory exists:  /scratch-local/twouters2.5313306/out_slurm/injection_1/
Injecting signals . . .
The injected parameters are {'M_c': 2.219851283723756, 'eta': 0.2434610775809719, 's1_z': -0.010708197637940522, 's2_z': -0.022837442936801913, 'lambda_1': 372.19559002228175, 'lambda_2': 4930.257331406774, 'd_L': 41.68326280946219, 't_c': 0.055469990318907536, 'phase_c': 5.402108320224592, 'iota': 2.1132821954538885, 'psi': 0.6297472301418479, 'ra': 4.978474639989268, 'dec': -0.5175362095348085}
Signal injected
H1 SNR: 43.43993291764929
L1 SNR: 60.63588845335266
V1 SNR: 43.288609254408605
Network SNR: 86.24176732650002
Saving network SNR
Start prior setup
Saving prior bounds
Finished prior setup
Initializing likelihood
Using the true parameters as reference parameters for the relative binning
Initializing heterodyned likelihood..
Finding reference parameters..
Using provided reference parameters
Constructing reference waveforms..
No autotune found, use input sampler_params
Training normalizing flow
Tuning global sampler:   0%|          | 0/2 [00:00<?, ?it/s]